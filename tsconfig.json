{
    "compilerOptions": {
      "target": "es2016",
      "lib": ["dom", "dom.iterable", "esnext"],
      "allowJs": true,   // позволяет использовать жс в ts
      "skipLibCheck": true,
      "esModuleInterop": true,
      "allowSyntheticDefaultImports": true,
      "strict": true,
      "forceConsistentCasingInFileNames": true,
      "noFallthroughCasesInSwitch": true,
      "module": "esnext",
      "moduleResolution": "node",
      "resolveJsonModule": true,
      "isolatedModules": true,
      "jsx": "react-jsx",
      "outDir":"./build",
      "sourceMap":true,
      "declaration":true
    },
    "include": ["src"],
  }


  //"outDir":"./build"   //указываем куда кладем скомпелированные файлы
  // "removeComments":true   //  не компелируем комментарии
  // "noEmit":true  // просто проверяет код в тс не переписывая в жс
 // "noEmitOnError": true  //не компелирует файлы если есть ошибка 
 // "sourceMap":true  // Для отладки ошибки, связывает тс с жс
 // "inlineSourceMap": true // используют для отладки, появляется сжатый код (бандл) в жс файле в виде комментария, который показывает связь с тс, по нему и надо отладку делать
 // "inlineSources": true  // записывает в жс исходники тс, тут не только о связи с исходными файлами тс, но и сами исходники тс
 // "declaration":true  // создает файл .d.ts с типами которые мы использовали в тс-файле, чтобы мы могла их переиспользовать в других файлах тоже 
 // "emitDeclarationOnly":true  создает только декларации 
 // "declarationDir": "./types" собирает декларации в нужную папку
 // "target": "es2016", стандарт компиляции тс кода
 // "jsx": "react-native" или чтото другое указать, в зависимости с чем используем тс
 // "jsxFactory":"React.createElement" указываем как должны создавать реакт элемент 
 // "module":"commonjs" используем для бека по моему это require, export и тп
 // "rootDir":"./src" директория в которой оежит проект 
 // "paths":  {
 // "@lib": ["./src/components"]
//  }  мы можем сокращать путь (import {} from '@lib/index.js')
// "strict":true стрикт режим, желатьтельно включать, если столкнемся с неисправной ошибкой можно выключить 
// "strictNullChecks":false  // если функция выдает number | undefined, при этом режиме можно указать просто number это более легкий режим 
// "strictFunctionTypes":false   //если в функцию поступает number | stringg можно указать просто number и тс не будет ругаться, тоже более легкий режим
// "strictBindCallApply":false  //можно с помощью .apply(undefined, [1,2,3]) передавать аргументы любые, тоже более легкий режим
// "alwaysStrict":true  // стрикт режим для жс 
// " "
// " "